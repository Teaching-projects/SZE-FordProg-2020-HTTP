import java.util.*;
import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;

parser code {:
    public static void main(String args[]) {
        SymbolFactory sf = new DefaultSymbolFactory();
        try {
            for (String arg : args) {
                Parser parser = new Parser(new Scanner(new java.io.FileInputStream(arg), sf), sf);
                parser.parse();

                System.out.println("");
            }
        } catch (Exception e) {
                System.out.println(e.getMessage());
            //System.exit(1); // Send error exit code to calling program
        }
    }
:}

//http request adatok
terminal HTTP_VERSION, METHOD, PATH, STATUS_CODE_AND_RESON;
terminal String SIMPLE_STRING, HEADER_FIELD_VALUE;
//json feldolgoz치s
terminal String COMMA, COLON;
terminal String LEFT_BRACE, RIGHT_BRACE, LEFT_SQUARE_BRACKET, RIGHT_SQUARE_BRACKET;
terminal String TRUE, FALSE, NULL, STRING, NUMBER_WITH_FRACTION;
//xml feldolgoz치s
terminal String XML_VERSION, XML_OPEN, XML_CLOSE;

//http request adatok
non terminal http_request;
non terminal start_line;
non terminal ValueHolder http_header_element, http_body;
non terminal header;
non terminal String header_field_name;
non terminal Integer json_body_cotent, xml_body_content;
//json feldolgoz치s
non terminal Integer array, object;
non terminal Integer key_value_list, key_value, value_list, value;
//xml feldolgoz치s
non terminal Integer xml_elements, xml_value;

//-------------------------------------------

start with http_request;

http_request ::= start_line http_header_element:he http_body:hb {:
    boolean valid = true;
    if(he.getType().equals(hb.getType())) {
        System.out.println("Valid type");
    } else {
        System.out.println("Invalid type");
        valid = false;
    }
    if(he.getSize().equals(hb.getSize())) {
        System.out.println("Valid size");
    } else {
        System.out.println("Invalid size");
        valid = false;
    }
    if(valid) {
       System.out.println("Valid request");
    } else {
       System.out.println("Invalid request");
    }
     :};

start_line ::= HTTP_VERSION STATUS_CODE_AND_RESON
| METHOD PATH HTTP_VERSION;

http_header_element ::= /*empty*/
| http_header_element:hhe header:hd {: if (hd != null) {
                                           String value = ((String) hd).trim();
                                           if(!value.matches("-?\\d+")) {
                                               if (hhe == null) {
                                                   RESULT = new ValueHolder(value.toUpperCase().contains("XML") ? "XML" : "JSON");
                                               } else {
                                                   hhe.setType(value.toUpperCase().contains("XML") ? "XML" : "JSON");
                                               }
                                           } else {
                                               if (hhe == null) {
                                                   RESULT = new ValueHolder(Integer.valueOf(value));
                                               } else {
                                                   hhe.setSize(Integer.valueOf(value));
                                               }
                                           }
                                       }
                                       if(hhe != null) {
                                           RESULT = hhe;
                                       }:};

header ::= header_field_name:hfn COLON:c HEADER_FIELD_VALUE:hfv {: if(hfn.contains("Content-Type") || hfn.contains("Content-Length")) {RESULT = hfv; }:};}

header_field_name ::= SIMPLE_STRING:ss {: RESULT =ss; :};

http_body ::= /*empty*/
| json_body_cotent:jbc {: RESULT = new jsonxmlparser.ValueHolder("JSON", jbc); :}
| xml_body_content:xbc {: RESULT = new jsonxmlparser.ValueHolder("XML", xbc); :};

xml_body_content ::= XML_VERSION:value xml_elements:xe {: RESULT = value.length() + xe; :}
| xml_elements:xe {: RESULT = xe; :};

xml_elements ::= XML_OPEN:xo xml_value:xv XML_CLOSE:xc {: RESULT = xo.length() + xv + xc.length(); :};

xml_value ::= xml_elements:xe {: RESULT = xe; :}
| xml_value:xv xml_elements:xe {: RESULT = xv + xe; :}
| SIMPLE_STRING:value {: RESULT = value.length(); :}
| NUMBER_WITH_FRACTION:value {: RESULT = value.length(); :};

json_body_cotent ::= object:jbco {: RESULT = jbco; :}
| array:jbca {: RESULT = jbca; :};

value ::= STRING:value {: RESULT = value.length(); :}
| NUMBER_WITH_FRACTION:value {: RESULT = value.length(); :}
| object:value {: RESULT = value; :}
| array:value {: RESULT = value; :}
| TRUE:value {: RESULT = value.length(); :}
| FALSE:value {: RESULT = value.length(); :}
| NULL:value {: RESULT = value.length(); :};

object ::= LEFT_BRACE:lb RIGHT_BRACE:rb {: RESULT = lb.length() + rb.length(); :}
| LEFT_BRACE:lb key_value_list:kvl RIGHT_BRACE:rb {: RESULT = lb.length() + kvl + rb.length(); :};

array ::= LEFT_SQUARE_BRACKET:lsb RIGHT_SQUARE_BRACKET:rsb {: RESULT = lsb.length() + rsb.length(); :}
| LEFT_SQUARE_BRACKET:lsb value_list:vl RIGHT_SQUARE_BRACKET:rsb {: RESULT = lsb.length() + vl + rsb.length(); :};

key_value ::= STRING:s COLON:c value:v {: RESULT = s.length() + c.length() + v; :};

key_value_list ::= key_value_list:kvl COMMA:c key_value:kv {: RESULT = kvl + c.length() + kv; :}
| key_value:kv {: RESULT = kv; :};

value_list ::= value_list:vl COMMA:c value:v {: RESULT = vl + c.length() + v; :}
| value:v {: RESULT = v; :};
